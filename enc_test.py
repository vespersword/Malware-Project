from Crypto.Cipher import AES
import Crypto.Random
from Crypto import Random
import base64
import hashlib
import generate_keys
"""
def generate_key(bits, encode=False):
     generated = Crypto.Random.OSRNG.posix.DevURandomRNG()
     content = generated.read(bits)
     if(encode):
        return base64.b64encode(content)
     return content
"""
class AESCipher(object):
  def __init__(self, key):
     self.bs = 32
     self.key = hashlib.sha256(key).digest()

  def encrypt(self, raw):
     raw = self.pad(raw)
     iv = Random.new().read(AES.block_size)
     cipher = AES.new(self.key, AES.MODE_CBC, iv)
     return base64.b64encode(iv + cipher.encrypt(raw))
  
  def decrypt(self, enc, decryption_key = None):
     enc = base64.b64decode(enc)
     iv = enc[:AES.block_size]
     if(decryption_key):
        self.key = hashlib.sha256(decryption_key).digest()
        #print(self.key)
        #self.key = (decryption_key)
     #print(self.key,len(self.key))
     cipher = AES.new(self.key, AES.MODE_CBC, iv)
     return self.unpad(cipher.decrypt(enc[AES.block_size:]))

  def pad(self, s):
     #s = s.decode('utf-8')
     return s + (self.bs - len(s) % self.bs) * chr(self.bs - len(s) % self.bs)

  def unpad(self,s):
     return s[:-ord(s[len(s)-1:])]

key = generate_keys.generate_key(32,True)
print("Key is ",key)
cipher_obj = AESCipher(key)
enc = cipher_obj.encrypt("This is my plaintext")
print("Encrypted text is", base64.b64decode(enc))
back = cipher_obj.decrypt(enc, key)

print("Decrypted text is",back)
  
